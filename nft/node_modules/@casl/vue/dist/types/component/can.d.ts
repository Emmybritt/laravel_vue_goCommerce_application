import { SubjectType, Generics, AnyAbility, Ability, Abilities, IfString, AbilityTuple } from '@casl/ability';
declare type AbilityCanProps<T extends Abilities, Else = IfString<T, {
    do: T;
} | {
    I: T;
}>> = T extends AbilityTuple ? {
    do: T[0];
    on: T[1];
    field?: string;
} | {
    I: T[0];
    a: Extract<T[1], SubjectType>;
    field?: string;
} | {
    I: T[0];
    an: Extract<T[1], SubjectType>;
    field?: string;
} | {
    I: T[0];
    this: Exclude<T[1], SubjectType>;
    field?: string;
} : Else;
export declare type CanProps<T extends AnyAbility> = AbilityCanProps<Generics<T>['abilities']> & {
    not?: boolean;
    passThrough?: boolean;
};
export declare const Can: import("vue").DefineComponent<CanProps<Ability<AbilityTuple<string, import("@casl/ability").Subject>, import("@casl/ability").MongoQuery<Record<string | number | symbol, unknown>>>>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    on?: string | Record<string | number | symbol, any> | import("@casl/ability").SubjectClass<string> | undefined;
    field?: string | undefined;
    do?: string | undefined;
    not?: boolean | undefined;
    passThrough?: boolean | undefined;
}> | Readonly<{} & {
    a?: string | import("@casl/ability").SubjectClass<string> | undefined;
    I?: string | undefined;
    field?: string | undefined;
    not?: boolean | undefined;
    passThrough?: boolean | undefined;
}> | Readonly<{} & {
    I?: string | undefined;
    field?: string | undefined;
    an?: string | import("@casl/ability").SubjectClass<string> | undefined;
    not?: boolean | undefined;
    passThrough?: boolean | undefined;
}> | Readonly<{} & {
    this?: unknown;
    I?: string | undefined;
    field?: string | undefined;
    not?: boolean | undefined;
    passThrough?: boolean | undefined;
}>, {} | {} | {} | {}>;
export {};
